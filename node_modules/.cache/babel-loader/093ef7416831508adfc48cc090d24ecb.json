{"ast":null,"code":"var _jsxFileName = \"/Users/ifeoluwaakinremi-wade/pager_duty_interview/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Dish from './components/Dish';\nimport DishForm from './components/DishForm';\nimport IngrFilter from \"./components/IngrFilter\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [dish, setDish] = useState([{\n    name: 'Injera',\n    ingredients: ['flour', ' sugar', ' milk']\n  }, {\n    name: 'Akara',\n    ingredients: ['flour', ' sugar', ' milk']\n  }, {\n    name: 'Bandeja Paisa',\n    ingredients: ['flour', ' sugar', ' milk']\n  }, {\n    name: 'Tandoori Chicken',\n    ingredients: ['flour', ' sugar', ' milk']\n  }]);\n  /*The purpose of newDish() is to be able to add to the state of listed dishes with a created a dish */\n\n  const newDish = (name, ingredients) => {\n    /*stored in the variable newDish is the established state ([...dish]) and adding what will be \"concatenated\" (name and ingredients) the new dish into the current state */\n    const newDish = [...dish, {\n      name,\n      ingredients: ingredients.split(',')\n    }]; //.split(',') on ingredients allows for the ingredients to be iterable, instead of it being a whole string.\n\n    /*add newDish as an argument for setDish to set the state */\n\n    setDish(newDish);\n    console.log(newDish, \"Here I am\");\n  };\n\n  const removeDish = index => {\n    const newDish = [...dish]; //storing current state in newDish variable\n\n    newDish.splice(index, 1); //at position \"index\", remove 1 item\n\n    setDish(newDish);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"List of Dishes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), dish.map((dish, index) => /*#__PURE__*/_jsxDEV(Dish, {\n        index: index // <--- used later to delete dish\n        ,\n        dish: dish,\n        removeDish: removeDish\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 36\n      }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Add New Dish\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(DishForm, {\n        addNewDish: newDish\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"KsvSQwa3MEhbC/LWk+h7hhm1cP8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/ifeoluwaakinremi-wade/pager_duty_interview/src/App.js"],"names":["React","useState","Dish","DishForm","IngrFilter","App","dish","setDish","name","ingredients","newDish","split","console","log","removeDish","index","splice","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,WAAP;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,CAC/B;AAACO,IAAAA,IAAI,EAAE,QAAP;AACAC,IAAAA,WAAW,EAAE,CACX,OADW,EACF,QADE,EACQ,OADR;AADb,GAD+B,EAM/B;AAACD,IAAAA,IAAI,EAAE,OAAP;AACAC,IAAAA,WAAW,EAAE,CACX,OADW,EACF,QADE,EACQ,OADR;AADb,GAN+B,EAW/B;AAACD,IAAAA,IAAI,EAAE,eAAP;AACAC,IAAAA,WAAW,EAAE,CACX,OADW,EACF,QADE,EACQ,OADR;AADb,GAX+B,EAgB/B;AAACD,IAAAA,IAAI,EAAE,kBAAP;AACAC,IAAAA,WAAW,EAAE,CACX,OADW,EACF,QADE,EACQ,OADR;AADb,GAhB+B,CAAD,CAAhC;AAwBA;;AACA,QAAMC,OAAO,GAAG,CAACF,IAAD,EAAOC,WAAP,KAAuB;AACrC;AACA,UAAMC,OAAO,GAAG,CAAC,GAAGJ,IAAJ,EAAU;AAAEE,MAAAA,IAAF;AAAQC,MAAAA,WAAW,EAAEA,WAAW,CAACE,KAAZ,CAAkB,GAAlB;AAArB,KAAV,CAAhB,CAFqC,CAEoC;;AACzE;;AACAJ,IAAAA,OAAO,CAACG,OAAD,CAAP;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAAqB,WAArB;AACD,GAND;;AAQA,QAAMI,UAAU,GAAIC,KAAD,IAAW;AAC5B,UAAML,OAAO,GAAG,CAAC,GAAGJ,IAAJ,CAAhB,CAD4B,CACF;;AAC1BI,IAAAA,OAAO,CAACM,MAAR,CAAeD,KAAf,EAAsB,CAAtB,EAF4B,CAEH;;AACzBR,IAAAA,OAAO,CAACG,OAAD,CAAP;AACD,GAJD;;AAMA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,2BAEE;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAGGJ,IAAI,CAACW,GAAL,CAAS,CAACX,IAAD,EAAOS,KAAP,kBAAiB,QAAC,IAAD;AACzB,QAAA,KAAK,EAAEA,KADkB,CACX;AADW;AAEzB,QAAA,IAAI,EAAET,IAFmB;AAGzB,QAAA,UAAU,EAAEQ;AAHa,SAAWC,KAAX;AAAA;AAAA;AAAA;AAAA,cAA1B,CAHH,eAQI;AAAA;AAAA;AAAA;AAAA,cARJ,eASG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATH,eAUE,QAAC,QAAD;AAAU,QAAA,UAAU,EAAEL;AAAtB;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,CAzDD;;GAAML,G;;KAAAA,G;AA2DN,eAAeA,GAAf","sourcesContent":["import React, {useState} from 'react'\nimport './App.css';\nimport Dish from './components/Dish';\nimport DishForm from './components/DishForm';\nimport IngrFilter from \"./components/IngrFilter\";\n\nconst App = () => {\n  const [dish, setDish] = useState([\n    {name: 'Injera',\n    ingredients: [\n      'flour', ' sugar', ' milk'\n    ]\n    },\n    {name: 'Akara',\n    ingredients: [\n      'flour', ' sugar', ' milk'\n    ]\n    },\n    {name: 'Bandeja Paisa',\n    ingredients: [\n      'flour', ' sugar', ' milk'\n    ]\n    },\n    {name: 'Tandoori Chicken',\n    ingredients: [\n      'flour', ' sugar', ' milk'\n    ]\n    }\n  ])\n \n\n  /*The purpose of newDish() is to be able to add to the state of listed dishes with a created a dish */\n  const newDish = (name, ingredients) => {\n    /*stored in the variable newDish is the established state ([...dish]) and adding what will be \"concatenated\" (name and ingredients) the new dish into the current state */\n    const newDish = [...dish, { name, ingredients: ingredients.split(',') }] //.split(',') on ingredients allows for the ingredients to be iterable, instead of it being a whole string.\n    /*add newDish as an argument for setDish to set the state */\n    setDish(newDish)\n    console.log(newDish, \"Here I am\")\n  }\n\n  const removeDish = (index) => {\n    const newDish = [...dish] //storing current state in newDish variable\n    newDish.splice(index, 1) //at position \"index\", remove 1 item\n    setDish(newDish)\n  }\n\n  return (\n    <div className=\"App\">\n      {/* {console.log(dish)} */}\n      <div>\n        <h2>List of Dishes</h2>\n        {/*eslint-disable-next-line array-callback-return*/}\n        {dish.map((dish, index) => <Dish key={index} \n          index={index} // <--- used later to delete dish\n          dish={dish} \n          removeDish={removeDish}\n        />\n        )}<br />\n         <h2>Add New Dish</h2>\n        <DishForm addNewDish={newDish} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}